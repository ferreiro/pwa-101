#!/usr/bin/env node

const app = require('../index');
const debug = require('debug')('hackathon:server');
const https = require('https');

const getDevelopmentCertificate = require('devcert-with-localhost').default;

function startAndListen(server, port) {
  return new Promise((resolve) => {
    server.on('error', onError);
    server.on('listening', () => {
      const addr = server.address();
      const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;

      debug('Listening on ' + bind);
    });
    server.listen(port, () => {
      resolve();
    });
  })
}

debug('Attempting to get certificate');
getDevelopmentCertificate('frontend-grocer', { installCertutil: true }).then((ssl) => {
  debug('SSL configuration received. Starting app server');

  const port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  const server = https.createServer(ssl, app);

  return startAndListen(server, port);
})

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
